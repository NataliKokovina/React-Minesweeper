{"version":3,"sources":["components/Cell.js","components/Row.js","components/Board.js","index.js"],"names":["Cell","this","props","value","className","onClick","open","React","Component","Row","cells","map","index","y","x","key","Board","board","state","current","window","setTimeout","alert","location","reload","setState","openCell","countGoodCell","startGame","goodCell","i","length","j","bomb","push","count","countBomb","rows","row","Game","minefield","makeField","status","xSize","ySize","bombCount","field","Math","floor","random","console","log","handleClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.75036517.chunk.js","sourcesContent":["import React from 'react';\n\nclass Cell extends React.Component {\n\n  render() {\n    if (!this.props.value[1]) {\n\n      return (\n        <button\n          className=\"square-is-close\" onClick = {() => \n              this.props.open(this.props)}>\n            {' '}     \n        </button>\n      );\n    } else {\n        return (\n        <button\n            className =\"square-is-open\">\n            {this.props.value[0]}       \n        </button>\n      );\n    }\n  } \n}\n\nexport default Cell;\n","import React from 'react';\nimport Cell from './Cell';\n\nconst Row = props => {\n  let cells = props.cells.map((value, index) => {\n    return (\n      <Cell \n        value = { value }\n        open = { props.open }\n        y = { props.y }\n        x = { index }\n        key = { index }\n      />\n    );\n  });\n  \n  return (\n    <div className=\"row\">{cells}</div>\n  );\n};\n\nexport default Row;\n","import React from 'react';\nimport Row from './Row';\n\nclass Board extends React.Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      board: this.startGame(props),\n      openCell: 0,\n    };\n  }\n\n  countGoodCell() {\n    let goodCell = 0;\n\n    for (let i = 0; i < this.state.board.length; i++) {\n      for (let j = 0; j < this.state.board.length; j++) {\n        if (this.state.board[i][j][0] !== 'X') {\n          goodCell++;\n        }\n      }\n    }\n\n    return goodCell;\n  }\n\n  countBomb(props, x, y) {\n    let bomb = 0;\n\n    if (x > 0) {\n      if (props.board[x - 1][y] === 1) {\n        bomb++;\n      }\n\n      if (y < props.board[x].length - 1 && props.board[x - 1][y + 1] === 1) {\n        bomb++;\n      }\n    }\n\n    if (y > 0) {\n      if (x < props.board[x].length - 1 && props.board[x + 1][y - 1] === 1) {\n        bomb++;\n      }\n\n      if (props.board[x][y - 1] === 1) {\n        bomb++;\n      }\n    }\n\n    if (y > 0 && x > 0 && props.board[x - 1][y - 1] === 1) {\n      bomb++;\n    }\n\n    if (x < props.board[x].length - 1) {\n      if (props.board[x + 1][y] === 1) {\n        bomb++;\n      }\n\n      if (y < props.board[x].length - 1 && props.board[x + 1][y + 1] === 1) {\n        bomb++;\n      }\n    }\n\n    if (y < props.board[x].length && props.board[x][y + 1] === 1) {\n      bomb++;\n    }\n\n    return bomb;\n  }\n\n  open = props => {\n    let { board } = this.state;\n    let current = board[props.y][props.x];\n\n    if (props.value[0] === 'X') {\n      window.setTimeout(() => {\n        alert(\"You lose!\");\n        window.location.reload();\n      }, 50);\n    } else {\n      this.setState({ openCell: this.state.openCell + 1 });\n      current[1] = true;\n      this.setState({ board });\n\n      if (this.state.openCell === this.countGoodCell() - 1) {\n        window.setTimeout(() => {\n          alert(\"You win!\");\n          window.location.reload();\n        }, 50);\n      }\n    }\n  }\n\n  startGame(props) {\n    let board = [];\n\n    for (let i = 0; i < props.board.length; i++) {\n      board.push([]);\n      for (let j = 0; j < props.board[i].length; j++) {\n        if (props.board[i][j] !== 1) {\n          let count = this.countBomb(props, i, j);\n\n          if (count === 0) {\n            count = ' ';\n          }\n\n          board[i].push([count, false]);\n        } else {\n          board[i].push(['X', false]);\n        }\n      }\n    }\n\n    return board;\n  }\n\n  render() {\n     let rows = this.state.board.map((row, index) => {\n      return (\n        <Row \n          cells = { row }\n          open = { this.open }\n          y = { index }\n          key = { index }\n        />\n      );\n    });\n\n    return (\n      <div>\n        <div className=\"board-row\">{rows}</div>\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Board from './components/Board';\nimport './index.css';\n\nclass Game extends React.Component {\n  constructor () {\n    super();\n    this.state = {\n      minefield: this.makeField(10, 10, 15),\n      status: 'start',\n    }\n  }\n\n  makeField(xSize, ySize, bombCount) {\n    const field = [];\n    let bomb = bombCount;\n\n    for (let i = 0; i < xSize; i ++) {\n      const row = [];\n\n      for (let j = 0; j < ySize; j++) {\n        row.push(0);\n      }\n\n      field.push(row);\n    }\n\n    while (bomb) {\n      const x = Math.floor(Math.random() * (xSize));\n      const y = Math.floor(Math.random() * (ySize));\n\n      if (field[x][y] === 0) {\n        field[x][y] = 1;\n        bomb--;\n      }\n    }\n\n    return field;\n  }\n\n  handleClick() {\n    window.location.reload();\n  }\n\n  render() {\n    console.log()\n    if (this.state.status === 'play') {\n      return (\n        <div className=\"game\">\n          <h1 className=\"game__title\">Minesweeper</h1>\n          <Board\n            board = { this.state.minefield }\n            status = { this.state.status }\n          />\n          <button className=\"button_reset\" onClick = {() => \n           this.handleClick()}>reset</button>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"game\">\n          <button className=\"button_start\" onClick = {() => \n           this.setState({ status: 'play' })}>Start</button>\n        </div>\n      );\n    }\n  }\n}\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}